{"ast":null,"code":"var _jsxFileName = \"/app/src/components/RegForm.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst RegForm = () => {\n  _s();\n  const [fullName, setFullName] = useState(\"\");\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [confirmPassword, setConfirmPassword] = useState(\"\");\n  const [errorMessage, setErrorMessage] = useState(null);\n  const [successMessage, setSuccessMessage] = useState(null); // State for success message\n\n  const handleSubmit = async event => {\n    event.preventDefault();\n    // Clear any existing messages\n    setErrorMessage(null);\n    setSuccessMessage(null);\n    if (password !== confirmPassword) {\n      setErrorMessage(\"Passwords do not match!\");\n      return;\n    }\n    try {\n      const response = await fetch(\"http://localhost:5001/api/register\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          fullName,\n          email,\n          password\n        })\n      });\n      const data = await response.json();\n      if (response.ok) {\n        // Handle success\n        setSuccessMessage(data.message || \"Registered successfully!\"); // Set success message\n      } else {\n        setErrorMessage(data.message || \"Registration failed. Please try again.\");\n      }\n    } catch (error) {\n      console.error(\"Failed to register:\", error);\n      setErrorMessage(\"Something went wrong! Please try again later.\");\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: handleSubmit,\n    className: \"p-4 p-md-5 border rounded-3 bg-light text-dark\",\n    children: [errorMessage && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"alert alert-danger\",\n      role: \"alert\",\n      children: errorMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 9\n    }, this), successMessage && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"alert alert-success\",\n      role: \"alert\",\n      children: [\" \", successMessage]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 5\n  }, this);\n};\n_s(RegForm, \"XmF1X7n27CQR+DHJVus5F94nTvM=\");\n_c = RegForm;\nexport default RegForm;\nvar _c;\n$RefreshReg$(_c, \"RegForm\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","RegForm","_s","fullName","setFullName","email","setEmail","password","setPassword","confirmPassword","setConfirmPassword","errorMessage","setErrorMessage","successMessage","setSuccessMessage","handleSubmit","event","preventDefault","response","fetch","method","headers","body","JSON","stringify","data","json","ok","message","error","console","onSubmit","className","children","role","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/app/src/components/RegForm.jsx"],"sourcesContent":["import React, { useState } from \"react\";\n\nconst RegForm = () => {\n  const [fullName, setFullName] = useState(\"\");\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [confirmPassword, setConfirmPassword] = useState(\"\");\n  const [errorMessage, setErrorMessage] = useState(null);\n  const [successMessage, setSuccessMessage] = useState(null); // State for success message\n\n  const handleSubmit = async (event) => {\n    event.preventDefault();\n    // Clear any existing messages\n    setErrorMessage(null);\n    setSuccessMessage(null);\n\n    if (password !== confirmPassword) {\n      setErrorMessage(\"Passwords do not match!\");\n      return;\n    }\n\n    try {\n      const response = await fetch(\"http://localhost:5001/api/register\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({\n          fullName,\n          email,\n          password,\n        }),\n      });\n\n      const data = await response.json();\n\n      if (response.ok) {\n        // Handle success\n        setSuccessMessage(data.message || \"Registered successfully!\"); // Set success message\n      } else {\n        setErrorMessage(data.message || \"Registration failed. Please try again.\");\n      }\n    } catch (error) {\n      console.error(\"Failed to register:\", error);\n      setErrorMessage(\"Something went wrong! Please try again later.\");\n    }\n  };\n\n  return (\n    <form onSubmit={handleSubmit} className=\"p-4 p-md-5 border rounded-3 bg-light text-dark\">\n      {errorMessage && (\n        <div className=\"alert alert-danger\" role=\"alert\">\n          {errorMessage}\n        </div>\n      )}\n      {successMessage && (\n        <div className=\"alert alert-success\" role=\"alert\"> {/* Bootstrap class for success */}\n          {successMessage}\n        </div>\n      )}\n      {/* ... rest of the form fields ... */}\n    </form>\n  );\n};\n\nexport default RegForm;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAExC,MAAMC,OAAO,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACpB,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGN,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACO,KAAK,EAAEC,QAAQ,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACS,QAAQ,EAAEC,WAAW,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACW,eAAe,EAAEC,kBAAkB,CAAC,GAAGZ,QAAQ,CAAC,EAAE,CAAC;EAC1D,MAAM,CAACa,YAAY,EAAEC,eAAe,CAAC,GAAGd,QAAQ,CAAC,IAAI,CAAC;EACtD,MAAM,CAACe,cAAc,EAAEC,iBAAiB,CAAC,GAAGhB,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;;EAE5D,MAAMiB,YAAY,GAAG,MAAOC,KAAK,IAAK;IACpCA,KAAK,CAACC,cAAc,CAAC,CAAC;IACtB;IACAL,eAAe,CAAC,IAAI,CAAC;IACrBE,iBAAiB,CAAC,IAAI,CAAC;IAEvB,IAAIP,QAAQ,KAAKE,eAAe,EAAE;MAChCG,eAAe,CAAC,yBAAyB,CAAC;MAC1C;IACF;IAEA,IAAI;MACF,MAAMM,QAAQ,GAAG,MAAMC,KAAK,CAAC,oCAAoC,EAAE;QACjEC,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACP,cAAc,EAAE;QAClB,CAAC;QACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UACnBrB,QAAQ;UACRE,KAAK;UACLE;QACF,CAAC;MACH,CAAC,CAAC;MAEF,MAAMkB,IAAI,GAAG,MAAMP,QAAQ,CAACQ,IAAI,CAAC,CAAC;MAElC,IAAIR,QAAQ,CAACS,EAAE,EAAE;QACf;QACAb,iBAAiB,CAACW,IAAI,CAACG,OAAO,IAAI,0BAA0B,CAAC,CAAC,CAAC;MACjE,CAAC,MAAM;QACLhB,eAAe,CAACa,IAAI,CAACG,OAAO,IAAI,wCAAwC,CAAC;MAC3E;IACF,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,qBAAqB,EAAEA,KAAK,CAAC;MAC3CjB,eAAe,CAAC,+CAA+C,CAAC;IAClE;EACF,CAAC;EAED,oBACEZ,OAAA;IAAM+B,QAAQ,EAAEhB,YAAa;IAACiB,SAAS,EAAC,gDAAgD;IAAAC,QAAA,GACrFtB,YAAY,iBACXX,OAAA;MAAKgC,SAAS,EAAC,oBAAoB;MAACE,IAAI,EAAC,OAAO;MAAAD,QAAA,EAC7CtB;IAAY;MAAAwB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACV,CACN,EACAzB,cAAc,iBACbb,OAAA;MAAKgC,SAAS,EAAC,qBAAqB;MAACE,IAAI,EAAC,OAAO;MAAAD,QAAA,GAAC,GAAC,EAChDpB,cAAc;IAAA;MAAAsB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACZ,CACN;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAEG,CAAC;AAEX,CAAC;AAACpC,EAAA,CA7DID,OAAO;AAAAsC,EAAA,GAAPtC,OAAO;AA+Db,eAAeA,OAAO;AAAC,IAAAsC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}