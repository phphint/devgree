{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\n\n// Define the initial state with additional properties for the user's full name and profile picture\nconst initialState = {\n  isLoggedIn: false,\n  token: null,\n  fullName: \"\",\n  profilePicture: \"\",\n  email: \"\"\n};\nconst authSlice = createSlice({\n  name: \"auth\",\n  initialState,\n  reducers: {\n    login: (state, action) => {\n      // Assuming action.payload is an object with token, fullName, and profilePicture\n      const {\n        token,\n        fullName,\n        profilePicture\n      } = action.payload;\n      localStorage.setItem(\"authToken\", token); // Save the token to localStorage\n      state.token = token; // Update the token in the state\n      state.fullName = fullName; // Update the full name in the state\n      state.profilePicture = profilePicture; // Update the profile picture in the state\n      state.email = email; // Update the email in the state\n      state.isLoggedIn = true; // Set the login state to true\n    },\n\n    logout: state => {\n      localStorage.removeItem(\"authToken\"); // Remove the token from localStorage\n      state.token = null; // Reset the token in the state\n      state.fullName = \"\"; // Reset the full name in the state\n      state.profilePicture = \"\"; // Reset the profile picture in the state\n      state.isLoggedIn = false; // Set the login state to false\n    },\n\n    // Add a new reducer for updating the profile\n    updateProfile: (state, action) => {\n      const {\n        fullName,\n        profilePicture\n      } = action.payload;\n      state.fullName = fullName;\n      // Only update profilePicture if it's provided (truthy)\n      if (profilePicture) {\n        state.profilePicture = profilePicture;\n      }\n    }\n\n    // ... potentially other reducers ...\n  }\n});\n\nexport const {\n  login,\n  logout,\n  updateProfile\n} = authSlice.actions;\nexport default authSlice.reducer;","map":{"version":3,"names":["createSlice","initialState","isLoggedIn","token","fullName","profilePicture","email","authSlice","name","reducers","login","state","action","payload","localStorage","setItem","logout","removeItem","updateProfile","actions","reducer"],"sources":["/app/src/reducers/authSlice.js"],"sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\n\n// Define the initial state with additional properties for the user's full name and profile picture\nconst initialState = {\n  isLoggedIn: false,\n  token: null,\n  fullName: \"\",\n  profilePicture: \"\",\n  email: \"\",\n};\n\nconst authSlice = createSlice({\n  name: \"auth\",\n  initialState,\n  reducers: {\n    login: (state, action) => {\n      // Assuming action.payload is an object with token, fullName, and profilePicture\n      const { token, fullName, profilePicture } = action.payload;\n      localStorage.setItem(\"authToken\", token); // Save the token to localStorage\n      state.token = token; // Update the token in the state\n      state.fullName = fullName; // Update the full name in the state\n      state.profilePicture = profilePicture; // Update the profile picture in the state\n      state.email = email; // Update the email in the state\n      state.isLoggedIn = true; // Set the login state to true\n    },\n    logout: (state) => {\n      localStorage.removeItem(\"authToken\"); // Remove the token from localStorage\n      state.token = null; // Reset the token in the state\n      state.fullName = \"\"; // Reset the full name in the state\n      state.profilePicture = \"\"; // Reset the profile picture in the state\n      state.isLoggedIn = false; // Set the login state to false\n    },\n    // Add a new reducer for updating the profile\n    updateProfile: (state, action) => {\n      const { fullName, profilePicture } = action.payload;\n      state.fullName = fullName;\n      // Only update profilePicture if it's provided (truthy)\n      if (profilePicture) {\n        state.profilePicture = profilePicture;\n      }\n    },\n\n    // ... potentially other reducers ...\n  },\n});\n\nexport const { login, logout, updateProfile } = authSlice.actions;\n\nexport default authSlice.reducer;\n"],"mappings":"AAAA,SAASA,WAAW,QAAQ,kBAAkB;;AAE9C;AACA,MAAMC,YAAY,GAAG;EACnBC,UAAU,EAAE,KAAK;EACjBC,KAAK,EAAE,IAAI;EACXC,QAAQ,EAAE,EAAE;EACZC,cAAc,EAAE,EAAE;EAClBC,KAAK,EAAE;AACT,CAAC;AAED,MAAMC,SAAS,GAAGP,WAAW,CAAC;EAC5BQ,IAAI,EAAE,MAAM;EACZP,YAAY;EACZQ,QAAQ,EAAE;IACRC,KAAK,EAAEA,CAACC,KAAK,EAAEC,MAAM,KAAK;MACxB;MACA,MAAM;QAAET,KAAK;QAAEC,QAAQ;QAAEC;MAAe,CAAC,GAAGO,MAAM,CAACC,OAAO;MAC1DC,YAAY,CAACC,OAAO,CAAC,WAAW,EAAEZ,KAAK,CAAC,CAAC,CAAC;MAC1CQ,KAAK,CAACR,KAAK,GAAGA,KAAK,CAAC,CAAC;MACrBQ,KAAK,CAACP,QAAQ,GAAGA,QAAQ,CAAC,CAAC;MAC3BO,KAAK,CAACN,cAAc,GAAGA,cAAc,CAAC,CAAC;MACvCM,KAAK,CAACL,KAAK,GAAGA,KAAK,CAAC,CAAC;MACrBK,KAAK,CAACT,UAAU,GAAG,IAAI,CAAC,CAAC;IAC3B,CAAC;;IACDc,MAAM,EAAGL,KAAK,IAAK;MACjBG,YAAY,CAACG,UAAU,CAAC,WAAW,CAAC,CAAC,CAAC;MACtCN,KAAK,CAACR,KAAK,GAAG,IAAI,CAAC,CAAC;MACpBQ,KAAK,CAACP,QAAQ,GAAG,EAAE,CAAC,CAAC;MACrBO,KAAK,CAACN,cAAc,GAAG,EAAE,CAAC,CAAC;MAC3BM,KAAK,CAACT,UAAU,GAAG,KAAK,CAAC,CAAC;IAC5B,CAAC;;IACD;IACAgB,aAAa,EAAEA,CAACP,KAAK,EAAEC,MAAM,KAAK;MAChC,MAAM;QAAER,QAAQ;QAAEC;MAAe,CAAC,GAAGO,MAAM,CAACC,OAAO;MACnDF,KAAK,CAACP,QAAQ,GAAGA,QAAQ;MACzB;MACA,IAAIC,cAAc,EAAE;QAClBM,KAAK,CAACN,cAAc,GAAGA,cAAc;MACvC;IACF;;IAEA;EACF;AACF,CAAC,CAAC;;AAEF,OAAO,MAAM;EAAEK,KAAK;EAAEM,MAAM;EAAEE;AAAc,CAAC,GAAGX,SAAS,CAACY,OAAO;AAEjE,eAAeZ,SAAS,CAACa,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}