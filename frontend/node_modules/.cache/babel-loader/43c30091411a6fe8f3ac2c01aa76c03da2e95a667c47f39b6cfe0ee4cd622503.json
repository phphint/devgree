{"ast":null,"code":"//dashboardSlice.js\nimport { createSlice } from \"@reduxjs/toolkit\";\nconst initialState = {\n  isPrivate: false,\n  email: \"\",\n  dateJoined: \"\",\n  profile: {\n    fullName: \"\",\n    profilePicture: \"\",\n    bio: \"\",\n    roleTitle: \"\",\n    location: \"\",\n    phone: \"\",\n    videoIntro: {\n      platform: \"\"\n    },\n    achievements: []\n  },\n  skillsAssessment: {\n    quizzesTaken: []\n  },\n  testimonials: [],\n  analytics: {\n    visitorDemographics: []\n  },\n  repositories: [],\n  resume: {\n    education: [],\n    workExperience: [],\n    skills: [],\n    projects: [],\n    certifications: [],\n    languages: []\n  }\n};\nexport const dashboardSlice = createSlice({\n  name: \"dashboard\",\n  initialState,\n  reducers: {\n    // Reducer for setting the entire dashboard data\n    setDashboardData: (state, action) => {\n      return {\n        ...state,\n        ...action.payload\n      };\n    },\n    setUser: (state, action) => {\n      return {\n        ...state,\n        ...action.payload\n      };\n    },\n    updateResume: (state, action) => {\n      state.resume = {\n        ...state.resume,\n        ...action.payload\n      };\n    },\n    // Generic Reducer for updating an item by ID in any section\n    updateItemById: (state, action) => {\n      const {\n        section,\n        _id,\n        newData\n      } = action.payload;\n      const index = state.resume[section].findIndex(item => item._id === _id);\n      if (index !== -1) {\n        state.resume[section][index] = {\n          ...state.resume[section][index],\n          ...newData\n        };\n      }\n    },\n    // Generic Reducer for appending a new item in any section\n    appendNewItem: (state, action) => {\n      const {\n        section,\n        data\n      } = action.payload;\n      state.resume[section].push(data);\n    },\n    // Generic Reducer for removing an item by ID in any section\n    removeItemById: (state, action) => {\n      const {\n        section,\n        itemId\n      } = action.payload;\n      state.resume[section] = state.resume[section].filter(item => item._id !== itemId);\n    }\n  }\n});\nexport const {\n  setUser,\n  setDashboardData,\n  updateItemById,\n  appendNewItem,\n  removeItemById\n} = dashboardSlice.actions;\nexport default dashboardSlice.reducer;","map":{"version":3,"names":["createSlice","initialState","isPrivate","email","dateJoined","profile","fullName","profilePicture","bio","roleTitle","location","phone","videoIntro","platform","achievements","skillsAssessment","quizzesTaken","testimonials","analytics","visitorDemographics","repositories","resume","education","workExperience","skills","projects","certifications","languages","dashboardSlice","name","reducers","setDashboardData","state","action","payload","setUser","updateResume","updateItemById","section","_id","newData","index","findIndex","item","appendNewItem","data","push","removeItemById","itemId","filter","actions","reducer"],"sources":["/app/src/reducers/dashboardSlice.js"],"sourcesContent":["//dashboardSlice.js\nimport { createSlice } from \"@reduxjs/toolkit\";\n\nconst initialState = {\n  isPrivate: false,\n  email: \"\",\n  dateJoined: \"\",\n  profile: {\n    fullName: \"\",\n    profilePicture: \"\",\n    bio: \"\",\n    roleTitle: \"\",\n    location: \"\",\n    phone: \"\",\n    videoIntro: {\n      platform: \"\",\n    },\n    achievements: [],\n  },\n  skillsAssessment: {\n    quizzesTaken: [],\n  },\n  testimonials: [],\n  analytics: {\n    visitorDemographics: [],\n  },\n  repositories: [],\n  resume: {\n    education: [],\n    workExperience: [],\n    skills: [],\n    projects: [],\n    certifications: [],\n    languages: [],\n  },\n};\n\nexport const dashboardSlice = createSlice({\n  name: \"dashboard\",\n  initialState,\n  reducers: {\n    // Reducer for setting the entire dashboard data\n    setDashboardData: (state, action) => {\n      return { ...state, ...action.payload };\n    },\n    setUser: (state, action) => {\n      return { ...state, ...action.payload };\n    },\n\n    updateResume: (state, action) => {\n      state.resume = { ...state.resume, ...action.payload };\n    },\n\n    // Generic Reducer for updating an item by ID in any section\n    updateItemById: (state, action) => {\n      const { section, _id, newData } = action.payload;\n      const index = state.resume[section].findIndex((item) => item._id === _id);\n      if (index !== -1) {\n        state.resume[section][index] = {\n          ...state.resume[section][index],\n          ...newData,\n        };\n      }\n    },\n\n    // Generic Reducer for appending a new item in any section\n    appendNewItem: (state, action) => {\n      const { section, data } = action.payload;\n      state.resume[section].push(data);\n    },\n\n    // Generic Reducer for removing an item by ID in any section\n    removeItemById: (state, action) => {\n      const { section, itemId } = action.payload;\n      state.resume[section] = state.resume[section].filter(\n        (item) => item._id !== itemId\n      );\n    },\n  },\n});\n\nexport const {\n  setUser,\n  setDashboardData,\n  updateItemById,\n  appendNewItem,\n  removeItemById,\n} = dashboardSlice.actions;\n\nexport default dashboardSlice.reducer;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}